
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Language {
  English
  German
  French
  Italian
}

enum Gender {
  Male
  Female
  Other
  PreferNotToSay
}

enum GenderPreference {
  Male
  Female
  Mixed
  NoPreference
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ListingStatus {
  Published
  Expired
  Deactivated
}

enum RequestStatus {
  Pending
  Accepted
  Rejected
  Expired
}

model User {
  id                            String     @id @default(auto()) @map("_id") @db.ObjectId
  firstName                     String
  lastName                      String
  email                         String     @unique
  image                         String[]
  phoneNumber                   String?
  dateOfBirth                   DateTime?
  gender                        Gender?
  language                      Language?
  school                        String?
  interests                     String[]   @default([])
  university                    String?
  instagram                     String?
  password                      String
  refreshToken                  String?
  role                          UserRole   @default(USER)
  status                        UserStatus @default(ACTIVE)
  otp                           String?
  otpExpiry                     DateTime?
  isEmailVerified               Boolean    @default(false)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?
  createdAt                     DateTime   @default(now())
  updatedAt                     DateTime   @updatedAt
  age                           Int?
  bio                           String?
  listing  Listing[]  @relation("UserListings")
  request  request[]  @relation("UserRequests")
  saveRoom saveRoom[] @relation("UserSavedRooms")

  senderNotification  notification[] @relation("sender")
  reciverNotification notification[] @relation("reciver")

  @@map("users")
}

model Listing {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  preview              String
  video                String[]
  image                String[]
  streetNumber         String
  postCode             String
  city                 String
  floor                Int
  rooms                Float
  bathrooms            Float
  size                 Float
  availableFrom        DateTime
  rentCHF              Float
  amenitiesAndServices String[]
  additionalExpenses   Boolean       @default(true)
  houseAtmosphere      String
  externalGuests       String
  smokingAllowed       String
  clearScheduleDefine  String
  currentyPets         String
  newPets              String
  cooking              String
  dinner               String
  spendingFreeTime     String
  language             String
  age                  Int
  gender               String
  status               ListingStatus? @default(Published)
  location             Json
  searchRadius         Int ?          @default(50)
  userId               String        @db.ObjectId

  user User @relation("UserListings", references: [id], fields: [userId], onDelete: Cascade)

  createAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roommate Roommate[]
  request  request[]  @relation("ListingRequests")
  saveRoom saveRoom[] @relation("ListingSavedRooms")

  @@map("listings")
}

model Roommate {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  image          String
  email          String
  firstName      String
  lastName       String
  dateOfBirth    DateTime
  languageSpoken String
  age            Int
  gender         String
  interests      String[]
  university     String
  instagram      String?

  listingId String  @db.ObjectId
  listing   Listing @relation(references: [id], fields: [listingId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roommates")
}

model request {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation("UserRequests", references: [id], fields: [userId], onDelete: Cascade)

  listingId     String        @db.ObjectId
  listing       Listing       @relation("ListingRequests", references: [id], fields: [listingId], onDelete: Cascade)
  matchScore    Int?
  rating        Int
  searchParams  Json?
  requestStatus RequestStatus @default(Pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model saveRoom {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation("UserSavedRooms", references: [id], fields: [userId], onDelete: Cascade)

  listingId    String   @db.ObjectId
  listing      Listing  @relation("ListingSavedRooms", references: [id], fields: [listingId], onDelete: Cascade)
  matchScore   Int?
  rating       Int
  searchParams Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model notification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  senderId  String @db.ObjectId
  reciverId String @db.ObjectId

  sender  User @relation("sender", references: [id], fields: [senderId], onDelete: Cascade)
  reciver User @relation("reciver", references: [id], fields: [reciverId], onDelete: Cascade)

  requestStatus RequestStatus
  listing        Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
